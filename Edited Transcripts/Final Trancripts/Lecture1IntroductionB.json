{
 "Header": "Lecture1IntroductionB",
 "Link": "www.link.com",
 "Transcript": "\n[30:09]good morning and welcome to three three oh one two software engineering my name is Steven Baron I'll be here lecture for the this semester so a little bit about myself so I really do nothing but software engineering and my study it right practice it and a couple companies and things and I teach it and I'm fascinated personally by software engineering it's not program it software engineering is not program it's a it's about how groups of people come together to put together complicated software I'm gonna show you a little video this video down here on my my web page which is the link is up above if you want to find out or find contact details about me wanna show you that little video that I keep linked up it's not by me it's by somebody else is a a bit ly link up at the top of this particular slide hello I just start playing it what you're what you're seeing here is up an animation showing Linus Torvalds building Linux X. each of the the links from the nodes to the set of sort of a sort of balls there is a kind of a directory and then we've got sets of files inside those directories and what we're seeing here is a is a timelapse of Lennix being built I personally find this fascinating but I can look at all day and this goes on this goes on for a long time but if I skip on a little bit just to about here I think and bear with me I think you're gonna see something kind of interesting here we go all the other people getting involved in building Linux excite gets kind of fascinating system remains \n[32:00]in picture of at this point dozens but as we move on we will see know many thousands of people getting involved in a continuing basis changing files all over the place not that big of a really really good picture of what it looks like it's very bursting what it looks like once when software gets built by large teams of people now open source is a particular kind of software development and most of you probably won't end up doing much open source development but you will end up working in companies that are very large and where the development process kind of looks like that it's hard to keep track of all the people involved in the people change and it's very hard to keep track of the nature of the software that's been built yet all that software that's been constructed needs to be done in a way that stays good and doesn't break things so let's move on Python so what is software engineering it's not program it's not being really cool at uh the latest programming language it's not being able to right marvelously linked lists or anything like that software engineering is is about people into back how you can build teams of people to build really cool stuff that doesn't fall over doesn't break this idea of you know break things I move fast that's a great idea but at the end of the day software engineers have to bring things back together again software engineering has become a form of proper engineering in the same way that so a you know civil engineers build bridges and have to to think hard about how they can stay up and how they work software engineers now have to take a very professional approach to have a construct software and this course really is about showing you what that entails so I wanna show you first of all \n[34:00] Margaret Hamilton's laws said the first engineer in fact she coined the phrase like in the sixties and I think the a the kind of it's worth noting how how how recent follow offices so when she wrote this when I first started using the phrase software engineering it was considered to be quite amusing engineering I've been around for hundreds of years but nobody had really thought about writing software as a form of engineering so for most people writing software was a kind of an art more like a craft writing a book dot dot kind of activity almost like writing poetry maybe some people might think about what and but it wasn't seen as an industrial process and Margaret Hamilton's started to change that and she's she she started to change it in a in a pretty radical way and there's a picture of her back when she was inventing software engineering around inspecting the sixties and there was one major event in the sixties that the the moon landing there's a picture of of those Aldrin taken by Neil Armstrong on the moon and it's no exaggeration to say that without Margaret Hamilton's they wouldn't have landed is a very interesting story around out and incourage you to go look essentially if if Margaret Hamilton's approach to software approach to will post software haven't been accepted a number of years before those two gentlemen try to land on the moon they would've crashed or they would've aborted there's no question about that so I suppose that's probably the first example of how where the idea of software engineering as the methodology at to deliver quality software and have had a significant really impact I don't know how many hundreds of thousands and millions of people watched the moon landing but they couldn't have done it without Margaret Hamilton's \n[36:00]vault in there so software engineering sometimes has a reputation for being very dry a subject in part that's because it's a very serious subject but in this course I hope we'll be able to find ways to both look at the theory and understand the theory and absorb that but also look at the practice and develop a personal way of building software with the best tools that we can find to make you productive and efficient and give you lots of free time to yourself as well so and if you if you want to try to define software engineering and one of the places you can go it's where you can go to wikipedia if you went to wikipedia you'll you'll read definitions coming from these gentlemen and if you drink a bit take a bit deeper and there's a a bit ly link again and incourage you to go and have a look you'll see some material about something called the software engineering body of knowledge that's a big long report and but it's it's interesting again I think to just look at when this material started to be brought together and this work was going on this is I think this is a publication from nineteen ninety nine I think for remember correctly there describing and discussing the work that they they're they're doing in the SWEBOK project which is a project to bring together and gather all of the different kind of approaches to engineering to try and come up with a kind of a read a rigorous definition so that when you're training engineers you know what you want to cover so that report and provides some context and I've I'd suggest you to go and have a read of that and again just to think about it software for to the term software starts in nineteen fifty eight and ninety \n[38:00]in sixty eight is the first conference on software engineering remember Margaret Hamilton's and was involved in making sure Neil Armstrong and buzz Aldrin didn't crash and burn and I was nineteen sixty nine and she was one of she was the person who invented that term in she was pushing hard to get people to accept that it was only a matter of years before them since sixty eight was the first conference by nineteen seventy two the penny dropped and IEEE was already and dilevering transactions on software engineering and IEEE transactions in the research world are kind of like gold standard and publications a few if a researcher get say publication into a transactions software engineering everybody celebrates and so didn't take long to catch on and the disciplines been developing for quite some time since here's a reasonable definition that comes from from from that work from the SWEBOK work the application of a systematic disciplined quantifiable approach to the development and operation and maintenance of software that is the application of engineering to software I think that bracket is actually in the in the original documents so that's a little I think it's a typo but there you and that's not a bad definition and there's a there's probably a lighter definition I'm not just to do the the last piece to apply engineering to software now many of you are not some are not engineers some of the class are have a background in engineering it'll be easier for them to understand what I'm talking about here and because if you if you study engineering you will see a whole range of approaches to safety and stability and maintainability of the designs you you deliver and all kinds of ideas there quite a lot of maths and \n[40:00]someone involved and where is if you're coming from a as a computer science background to probably more used to thinking about softwares and software engineering perhaps is being about coming up with really good efficient algorithms and that's obviously part of the process because you can't have software engineering process this process that doesn't deliver software that works well who works for the environment and works on the machinery that's available so the the building in the system is really important but what's also important and perhaps more important in some respects when you get to the scale of systems that are built in the real world is to make sure that you have a methodology an approach to building software that will scale up to the number of people you need to build and maintain the real systems and that you can look after the maintenance of software that you know how to go about debugging software that you even know how to go about finding if there are bugs in the software testing thank kind of activity all of that is really important to scale software development up beyond you know couple of people in a carriage and you can get away without doing real software engineering for small groups of people involved in small software projects but once you start to build teams getting beyond about five six seven people you really stop to start thinking about process how people interact and how people work together and that's what software is it's about putting discipline around the process of building great software that's why should you care um well you care for a number of reasons the first reason is here's an article from the by Marc Andreessen who is the guy in the the picture up above me here that's an earlier picture and he was the guy who created Netscape which you may not \n[42:00]be aware of but Netscape was the first commercial internet browser before you read my first Microsoft exploring before Microsoft removed Netscape from the from the picture and Netscape was the the big company at the time Netscape was inventing the internet in some ways and Marc Andreessen was the guy the techie in that in that outfit but uh here and went on to became a venture capitalist and a number of other things he's become a a particularly important individual in the in the the software world and I guess it's about ten years ago now he wrote and this article why software is eating the world and can links up there have a read software reaches into every part of our lives I think even especially when you think about what's going on with covid and so much of the activity that is able to continue things like online shopping and so on are all built around software systems talking to each other large scale distributed systems involving millions upon millions upon millions of lines of code all of which is working perfectly together that's not possible without proper software engineering discipline you can't build software that involves the work of quite literally tens if not hundreds of thousands of software engineers and without there being keep practices and principles that can transfer from organization to organization so when one person moves from one job to another job that they they hit the ground running and they know what they're doing so the fact that software is becomes so important in our world makes it really important that software is built well and that's what software engineering is another reason \n[44:00]why you should care about software engineering it's it's a much more pragmatic and  personal reason if you can't do software engineering if you can program but can't work in the context of you know reasonable scale teams with other people and also if you can't use the tools that software engineers are using to become very very efficient then you're gonna have a problem you're not going to be able to keep up with people around you we'll talk about this a lot more detail later on but software engineers our usual amongst the professions in that there are very few professions where and the professional built his own tools software engineers spend a lot of time crafting in building their own tools kind of like blacksmiths really the only people I can think of who who come into something similar so it's important to understand the tool set software engineers used to do their discipline to to to to do their professional work because if you don't you won't keep up with other software engineers who use tools to improve their efficiency in their performance I want to give you a simple example and to society quite interesting this is a picture of a software engineering tool term the article I mentioned was in Forbes is a follow on from Andreessen says softwares eating the world to the talks about a I eating the world and it includes this picture in it I thought it was quite interesting so I decided to to to short here here for you I'm it's a tool it's an AI tool and this is of a visualization of of of what it's doing it is working out what the developer wants to rush it's working out what code the developer is a is writing by and \n[46:00]looking up the code already and and it's it's kind of knows what it's kind of like a like the Microsoft paperclip Microsoft paperclip knows you are trying to write to the next Facebook here's some code it's it's a fascinating idea but it's what it's doing is it's mining and millions upon millions of lines of code and you know some of the code we write is very unique but a lot of the code we write is that for the place it's very similar to other code and other people have written and since two is working out what code you're trying to write and I think that's really interesting look how efficient somebody using that code would be so the using that system would be compared to somebody not using that system so for a very straight forward personal reason you need to start understanding these tools and understanding and how you can use them if you're going to be a good engineer the good service good software programmer if you prefer to think of it that way because if you don't get used to these kinds of tools if you're not able to use things like source control and unit testing if you're not able to to deal with information the of knowledge based systems that engineers use if you're not able to use all compiler tracing all the rest of all of these kind of tools have become part of the toolkit of the software engineer what you're not going to have a career in a to be pretty blunt about it no matter how good you are designing algorithms so think about what's important reason to to to want to care about software engineering the course and there are some some in the class who will never program and or at least are unlikely to program in a professional capacity but are likely to become systems analysts and you know managers software engineering teams I'll put you that you guys need to to understand what it is they're doing if you're to understand what's possible from what the capabilities and capabilities \n[48:01]so let's talk now about her three three oh one two is structured so this is a recorded session and obviously this is brought upon us by by covid that we have these recorded sessions what my plan is not to simply record the sessions for you and then have you listen to them and then have you submit material so more often than not not the plan will be to do these as live sessions when we can't find to incourage you to engage I'm gonna try one of those on Monday next am I going to get you to do a task and we're gonna have a conversation around some things so the way the overall modular structures are technically two lectures and there's technically one would've been a chew toy than the normal run of the mill although for the last few years we've we've tended to use it as a kind of a drop in help session and will probably keep it working that way this year and so will cover in the lectures will cover theory cover practice and I tend to use one lecture to do Siri and you know development methodologies that kind of thing and then I tend to use it the other lecture to to to cover the the practical work that we're asking you to do to to help scafold it guide you in the kind of work that we're asking you to do so this module has to bit unusuall so there is no exam at the end of the day there's no  written exam where you even have for this year go online and and you know see an exam paper and to submit something instead we set a number of tasks during the year so we start very small but we build up to fairly substantial tasks under tasks that are focused around \n[50:00]exploring what it is to be a software engineer in the modern context and that also includes a lot of  work on thinking about how we can measure software engineering and and software engineering practices which is my particular specialism and so lots of tasks work on a lot of time devoted to have conversations around what you in your individual practical work and I can be doing so we start probably a little bit more theory driven I'm we and up towards after the the the kind of the week six seven we end up towards thinking and talking an awful lot more affected different kinds of practical things that you might try to do it and you see how that emerges as as we go along so on the theory side we um well we cover a lot of material suppose but we don't go too deep into it because a lot of the theory work and his work that you need to you need to learn you need to understand but you needn't probably more to think about it as a set of options so that when you crashed into the real world you'll see what people are really doing because real software engineering teams tends to build their own processes that suit their own and needs their own goals and so we learn some of the basics this is a picture here I've put up of the war full development methodology which suggests that you do all the design work up front and then you move on to to implementing the thing you know you do this in stages and the stages could be like you know three months or six months and just just just drawing pictures of software before you actually write code and there are that was a read of the waffle model is a is a well established model and we we learned out because we need to understand the fact of the how software \n[52:00]it doesn't get done that way much anymore but to also understand the context in which it should be done in not way and there are other development methodologies and so this is a somewhat recursive methodology because component methodologies and one that can save a lot of attention these days and although probably in the in the sense of people talk about it rather than really implemented full and it's full detail but I drove development so we look at agile development and in quite a lot of detail because it's it's probably the most important development methodology in terms of some of its core radius and so the idea of user rating fast of developing something in and changing it and then changing and changing in response to customers or clients however whoever is is is the end users and that that's a key idea in in software development the stays and so we'll look at that and quite a lot of detail okay so a lot of work and a lot of maths theory if you're looking for a taxed and you don't need to by text but if you're looking for a text software engineering by here in Somerville is a is a great place to go and the bit the link I've put up there is to his own personal website that supports that that book and you'll find there are an awful lot of good material the find slide decks and I will use some slides in fact those images I used a moment ago or from from his slide decks so I will I will borrow material from from from those slide decks and if you want to look at much more detail than I will go through in the in the time available to us in the module in some of the book is a great great place to go he also has a whole series of videos and and if you prefer no I'm so \n[54:00]ordena material in the kind of way this is a great text I really recommend and the other side than what we need to do if you remember his eyes I talked about how he needs to think not just about the theory but also the practice of her you are going to become a really cool engineer she knows loads of things about the tools and is really efficient and you know gets amazing things done in a in a in a remarkably short amount of time how you become will call there one of these ten access token balls looking at exploring and using a lot of tools and what I've noticed I suppose over the last maybe four or five years what I've noticed most about what differentiates the really strong developers in the classes from those who maybe aren't so strong it's just a lack of experience with tools so three strong developers maybe they just spend time looking at tools you know I'm maybe it's the work the project work on the three often hobby type work to date the two leads them to to explore tools and or maybe they've had people of I've worked with people who who who who expose into these tools but for whatever reason and you can do this too and so using these tools will leverage your basic capability will strengthen your skills and will make you a better software engineer so we look at many tools and one of the things that I have as a goal for this as for this module is for each of you to start to understand and explore and work and identify which tools fit together to make your personal practice so we've got the theory on one side \n[56:00]which is all about how teams of people come together and how they should all work and develop software but then on the other side we've got and your personal practice and what tools you use in order to get truth get your work done and this can be everything from what development environment to use to in this particular example slack is a is a communication tool so and it's very popular among software engineering teams and it's a kind of a shock room system but it just seems to work really well for software engineers most other groups of slack is a tool Atlassian or a company that provides a huge number of tools and source control tools and knowledge base management tools project management tools and all kinds of stuff and again once you get out there in the real world to stuff the stuff is just what you end up using so you might as well get used to it and it'll improve your productivity and improve your your performance even in college and I will also landed out lovely job and after college as well at Microsoft are huge in the tool space Microsoft are kind of interesting company really out there that kind of known for symbols Xbox and office in those kinds of things but there run a daycare center software development technology is really superb really really really good stuff Microsoft teams is a is a good example of a of a technology that's used and in the in the real world is the Microsoft teams the Microsoft technologies probably overtaking slacking fact and sucking huge important communications technology but Microsoft's technology stock is probably have more strongly used I would say at the moment but yeah three six change \n[58:00]there are and all kinds of ways of organizing tasks and everything from pieces of paper post it notes upon on the wall which is important and technique all the way through to online services and tools like like trouble and we'll get into all this technology as we go but you know one of the things I'll be encouraging you to do as you as you move forward just to start to use these tools to help plan your own individual work in this module and then after this module and some of you will continue on into some groups project modules that that I'm involved in and obviously these tools would be a much more important when you're brought together in teams of four five six twelve fourteen fifteen people and you course you'll see in practice have these tools are great if you follow through into into into those modules but if this is where you leave us of this module is as far as you got to I hope you're going to get some value out of our exploration of these to sets and and then you'll taken forwards into your own interim practices who go forwards okay so there are also technologies and that are applied and making it easier to build and run the software and probably user the most important to all the tools I can think of at the moment is doctor and I'm gonna spend quite a bit of time with doctor helping you to to install that news it and conceded vantage is of it the what what doctor gives you is a very long wait way of building a very standard environment for building and running code if you can building running in docker on your laptop it's gonna run on the servers in Amazon and start kind of a technology it's "
}