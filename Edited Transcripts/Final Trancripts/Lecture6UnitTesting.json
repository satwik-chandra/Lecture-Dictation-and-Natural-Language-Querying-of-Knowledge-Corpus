{
  "Header": "Lecture2BuildingaToolChain",
  "Link": "www.link.com",
  "Transcript": "\n[00:05]well good morning it's eight o'clock on tue and this is csu three three oh one two if you're on schedule if you're not i don't blame you talk as a little early so today what we're going to do in the second lecturers were going to focus on the practical side of becoming a software engineer so building a tool chain is the the topic were were interested in in today and how this is going to work is is are going to set you a series of tasks i'll be setting i think three to date and then as the weeks go by will set you other things remember we're going to do one week one lecture a week of theory we're going to do one lecture a week focusing on practical things and that we have this third session on a wednesday where you can ask questions and drop in sometimes that would be a everyone to gather in a in the clable truck and sometimes it'll just be discussion sealed the dits the day when you raise the questions and we might we might have side bars and help you at various things so it's important to think don't sit back if you're having trouble to make to make your problems known lets help you okay that's good going so i think a number of you are probably already using it open it's it's highly likely but you're probably not as of yet getting a chance to use it in a all the way proper software engineers use it so you know working with teams that kind of thing so the task for today is to the task for this week she like is to open a git up account open a bit bucket account that's the first task i just want you to set up these accounts check out look at the some of the documentation in the introductory material and we want to make sure every ones up to speed on this material so this is the web page for for so if you go to the link of the top of the page i think it's up there is a bit of slash product you're going to get hit this page and you can you can down the software client various clients you can log in you can create a service account and that's probably an important word to introduce most of the software that that engineers use these days are services provided by remote companies sometimes non profit organisations and the engineer works with remote service provide these services and that's how we get the collaboration going now we'll start to to look at a lot of more detail of this kind of thing as we go but for the moment just think of bit and get up a services that you need to register for and then you can make use of the machinery make use of their services as you go so check out pulling this code copying or cloning this code fresh copies deleting the local copies copies this is all the kind of activity that stuff engineers do on a daily basis and so we want you to try and play with these things before we start getting you to work on code that matters so pick something that doesn't matter bit of a sketch does even have to compile just try playing with things and see if you can get used to it to to have this technology works now get up and provide what we call get so get is a source control system that was designed originally built originally by linus to obviously now is an open source piece of work that's developed by many many people will start to look at these republicans in the the people involved over the next few weeks \n[05:37]so it's it's a git technology and get is a source control to control technology it's quite different from from from other technologies but it's it's become the mainstream technology that people use so the next thing you're going to need to do as part of this activity this is creating accounts on get up activity is you're going to need to start to learn how to use get and this page is a good resource for for the to use get there all kinds of links there this is a screen shots of this this is into live link but i go to switch to live link now and hopefully you can see that in fact what i might just do is just quickly check \n[06:27]so there's documentation there's these nice little tools get presents some \n[06:39]conceptual changes to people sometimes they don't understand what it is doing and so when we talk about things like branching and merging we talk about \n[06:51]you know having local copies of code that hasn't been pushed to the remote server some of these things can be conceptually difficult and the the the little tools on this on this page are good ways to understand what's going on so i don't know if you'll be able to really see this of this definition but if you go to this to and if you start doing things like \n[07:17]ge you'll see hopefully you'll see up there what's happened is this where is there is a new commit and if i decide to \n[07:31]test test for this will have created something called test for and if i go commit commit is how we take code that we've changed and we we we push it into the repository system as a snapshot you'll see that over here the new commit is been associated with the master not the the branch that i just created but if i go check out test that i call for and then if i commit we'll see now i making modifications to that to that branch is go correctly get check out master again and we can go \n[09:31]software engineers work is just a really good fit so good tools to learn okay so let's go back to the to the overall slide then so there are various tools here on this on this slide deck \n[09:49]various documentation that you can look at the theory of software engineering if you want to look at another book well we can so i like this one this is a book about get \n[10:20]it called learn getting a mons of lunches it it costs now it's not cheap at cost thirty one dollars but the the nice thing is you can actually read the entire book online as you don't need to buy a copy if you've got an ipad or something you can or like to reach from the desktop you can you can read all of this stuff it's it's all it's all up there and the way to think of it is it's kind of like twenty minute twenty five minute lessons you know over i think i think there are about thirty chapters twenty chapter so there you go for working weeks so if you spend maybe half an hour a day working with this book working through the material you know get well no get is on the face of it very simple tool but it's actually also a pretty complex to have a lot in it so if you think about it the the ways in which software engineers work together could be could be quite complex and interesting and tools like it need to be able to handle all those kinds of variations so there's a lot of power in there it's it's it's a it's a very well supported to and it's the bedrock of all software engineering and i put you this way if you can use get not really a software engineer so this is your chance if you haven't yet how to go this is your chance to to re dig in and try and try to start to understand source control systems as the bedrock of your practice okay so that's \n[12:09]lan get in a month of lunches okay that's tough one what's really tough to because task one is to read paper and prepare for discussion on monday task to them to start using get tasks three is \n[12:31]a little it's a little bit more interesting i suppose this is what i want you to do you will you all probably use an editor of some kind when you write code it it could be vi and it could be tech steady or not pad in in in the operating system you're using depending on this it could be something very simpler could be something very sophisticated or could be in telejust kind of things so you have an editor almost you could have made to surge you if you haven't got some default editor that you used to to to to to write code and it's probably an integrated development environment it probably has compilers built in your press a button to run code and that kind of thing visual studio tool what i want you to do this week is i want to spend i want you to spend a little time thinking about why you're using the idea and exploring others other options to see if there are other options that are better for you and this is the first step really in trying to get you to think about you're kind of like a blacksmith you build your tools you assemble the tool set that you're going to use to be productive you probably write scripting to bring these things together your when you're sitting down to do piece of work you are both writing code that's going to a software system but also probably writing scripts to make it easier to to write the code to go into software systems you're probably doing both you'll be later on you'll be writing code to test the software that you're writing you'll be writing code to push the code that you written into deployment and even going to get to a stage where you will write code that will from from a poland of that code from from a repository start and initialise a base system no software install all the tools that you that you use so that you know maybe in ten or twenty minutes you can if if you lost your laptop you just pulled out a new laptop you press go and you have your environment back again there's there's no real excuse you know my laptop broke fine run it up and something new so we're going to get you to a point where you you think about is a natural thing to do building and constructing automation to make your job easier so i want to think about what \n[15:07]what integrated development environment or what editor you should be using and i want you to consider the possibility that it should be the when you're you're using presently because when you're using presently might just be the default option that somebody gave you when you started a programming course where is now what i want to think about is what's the best to you for the next four years \n[15:30]wikipedia there's a link wikipedia provide a large set of you know links to this is the top of a web page that that goes on for quite a long time there are a lot of source codes editors and ideas text enters and so on that people use for programming and sometimes people are writing a particular programming language in this this page is a list of programming languages and sometimes people are working with particular programming languages ten to favor certain editors if you're doing work on on the mac platform for example you're probably going to use ex code if you're writing how scale you're probably going to use emacs this is certain things go to get so i want you to have a look at this page and just breathe in the to the complexity on the range in the variations in the tool sets and then i want you to start thinking about seriously changing the tools you're thinking about doing some this page just has this just to give you an example if you go to this youtube i'm not going to play the sound or anything just going to see if i can yeah this this is a a video of somebody who is explaining a bunch of tools so this guy is actually going through a set of integrated development environment showing what they like and talking about what's what's good and bad almost like the way people review cars this guy's reviewing text editors so there's a whole group of people out there looking at tech senators and if you're considering for example using adam you probably find by just going on to youtube are good you'll probably find people talking about what the strengths and we editors are before you even try to make so i want you to do this i want to do again i want to look at the options that are there and consider consider trying new things there's probably going to be an editor out there that you want to wear up unless you're really up to speed with this stuff that's going to make your life easier so i want to see if you can find so let's skip on this guy show you a couple of kind of deful editors that people would consider anyone is thinking okay what editor should i use to get this work done it's going to be one of these probably and the first is very them become very popular \n[18:06]its it's it originally was vi and \n[18:15]the i was a very early editor it had modes to get into this you can you can yourself and and the next version of of all about it's it's it's it's it's very full pro and and a lot of people use it lot of people like it it's a little bit \n[18:40]l oriented and it might not suit you if you like lots of lot of buttons and things like that but a lot of people swear by it each of these obviously importing you should see there and putting a link up there so you know use those links going to find go to get see what it's all about next one kind of at the other end is is a beautiful kind of visually visually stunning visually nice \n[19:28]a series of plug ins and packages that can be brought to them and so you can style them and customise them and make them do what you want to do and my particular favorite emacs there are people who never need the emacs that they never use a ring the system they they run up emacs and they do there email and there web browsing and the coding and to do everything in what is essentially a text driven environment sort of looks like an old terminal but they never leave it i'm not quite like that myself but this is the other and this is a beautiful graphics and buttons and sweet packages really nice stuff and these editors support lots of lots of languages with customised plogans that will you know dents to code properly that will suggest things the appropriate type spot errors will allow you to to trace through the code if if the language supports step wise tracing through code when you're when you're debugging it so these are these are nice environments a good one to look at if you're doing on \n[20:38]aple macs and you're going to have to use ex code at some point even if it's only to compile up and distribute code for for for for apple environments and some get used to it so i would suggest you if you have a mac if you're a mac person you know install ex code and just try that that would be one i think you should you should definitely have a good next up visual studio code is a really really really nice piece of work it's one of these microsoft kind of development tools obviously comes out of the visual studio which are amazing \n[21:49]the visual studio code is is really nice really nice out and again another example of something you want i'm not saying definitely try these are saying consider them and maybe consent to some others so this is each one i'm showing you in each case there is these are the web pages from the from the from the links you know the home pages for each of these technologies and this this page shows you what the editor actually looks like a emacs you max is my particular favorite probably just because i grew up with it and if you weren't doing java and you were if you were doing to suppose but if you if you want you to enjoy the ideas for java at the time that we're pretty heavy with something like flexible but highly extensible and highly customisable than emacs was was was the edge of choice and i kind of think of the macs as a framework for running code that that manipulates source code so if i want to change the way formatting works i can actually dig in right code and if i want to have specialised functions if i want to you know combine together a set of tools to manipulate code code in some way i can do that actually in the editor and so it's remarkably extensive example of this so this is a video from the emacs rock series which is that set of series of videos by guy who has constructed a set of demonstration videos for hold range of technologies focused around emacs and and this particular one let's see this is one shows how particular package that was written by somebody else multiple cursors to happen so watch this you see what is doing selecting a bunch of of pieces of text the same and now rather than have one cursor he has three and he's able to manipulate all of the code in the place so this obviously works really well for what is doing she's manipulating how i think what he's doing is is doing some international internationalisation so he's he's kind of stripping out an english language and he's starting to instead use \n[24:39]tags instead so that so that the ht mail here in this case is being constructed from tags and you can see that all of these kind of manipulations that is doing adding those tags to another file in the website you're building you see how efficient to use that comes back to what i was saying yesterday when i was saying that you you really need to start using these tools not simply because you know good developers are lazy and these tools make life easier to have to do these things you have to do less work but if you don't do these things then all the people around you are doing these things will just pass you by you know to just work so much faster than you so so this is about taking productivity seriously and starting to think about how you can and make your life easier so that you can get work more work done or take more time off whenever we want you want to want to think about it okay so that's emacs rocks is all kinds of videos got it helps that the guy has a kind of a quite cool european accent talks about emacs rocks it's a bit of fun have a look \n[25:53]so to do i want you to try by try i mean download install and use with some kind of piece of code try to three of them try three different editors this week decide on one and that could be one of the three or could be your the editor you already use so i want to try three other editors to sign on one and then email me at this that address \n[26:24]email me a reasons why you are sticking what you know or you are deciding to to go with something something new don't make the mistake of thinking that don't make a mistake of thinking that you should change midstream okay so you should try to to go from from one editive to another because you're busy working on the existing editor is okay and you know you should change you should change if you think you're not going to get any kind of productivity gain from switching in the medium term okay don't think short term here don't think all that i make my life easier by sticking with the the thing i know even though it's slow and crashes names but really is not very good \n[27:18]i find something that's much better but little learning curve and you know that's what you should do because you're going to win it kind of like well can you touch type if you can touch type you're wasting your time and trust me i can touch type i learnt to late and i i can type reasonably quickly but i have to keep looking up and that is sister it's a it's a how that i cant can get out of but if you can touch type and if you know anybody around who who can touch type just looking fast to go so much faster they go compare to us key hunting people i have this kind of similar type key hunting thing going on at this stage habits are hard to break putting in the time to force yourself to type slowly is worth it it won't take that and after a couple of months good software engineering teams probably write twice as much test code is core system code that code that just tests how the system code works but spending their time writing that test code saves some time in the long run short enough the development cycle makes it easier for them to build really good systems that don't break and that are easier to maintain so again and again you're going to see this investment in improving or in some cases perfecting the tools that you have in the skill sets that you have to deploy and will make your life easier the pay back comes much quicker than you think so so don't fall into the trap of saying i'm just going to keep going the way on going because what's going to happen is you're going to people fly take off and fly head of it and you're going to be held back you know basically having one hundred behind your back because you've decided not to to innovate and improve your tool set so please try things don't worry about in this regards to development editor regards taking on a programming language whatever it might be don't worry with me and this module don't worry about taking those risks not paning out you get punished we don't punish anybody who takes risks we don't punish people who try to do innovative new things if they're trying to develop there that practice that that's the really important piece for us \n[30:12]sirred piece i want you to do and that's it so three things i suppose in total we want you to review that paper for monday we're going to have a hopelevel recession where we can talk about it i want you to create a bit bucket and i get up account and start using get with those accounts and just get used to that if you haven't done that before makes and even if you have done it before go bit further \n[30:40]sort reading a book start filling in your knowledge and your understanding of those tool sets get is a key took and then the third pieces try a few different few different editors and that's it so trying to all of those things this week there there are not greater tasks is important to talk about and some of the things we get you to do we grade and some of the things we get you to do we ask you to do and we are asking you to do them for a good reason what we're asking to do them because we believe it's going to improve what's going to like we think it's going to actually make for \n[31:22]a more professional existence where you can deliver more more comfortably with less stress and all the rest of it so we don't try and we don't ask you to do things that are don't have a sensible point to them so please trust this if we want you to try something please just have a go to do it don't worry about timeline if it's not grated but even if you find your busy and you you know do get to the chance to do one of these things to do please please market in your your your notebook some world something you really should try and do and when you have a spare cycle we have some spare time during the during the semester you know to get have a go and that's all we can ask so short lecture today i think we've only run to probably about twenty minutes or so maybe thirty minutes and that's it for today so good bye "
}