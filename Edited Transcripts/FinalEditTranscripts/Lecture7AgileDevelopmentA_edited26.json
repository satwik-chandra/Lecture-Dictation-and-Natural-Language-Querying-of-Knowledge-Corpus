{"Header": "Lecture7AgileDevelopment", "Link": "www.link.com", "TIME_STAMP": "25:07", "TEXT": "the next place work doesn't seem to work very well is in software maintenance which is kind of ironic but part of the problem with software maintenance is maintenance quite a long term long duration and if you don't have a lot of documentation in place it can be very hard for people to you know you can remember what a code based did when they wrote it three years ago so think of it this way agile development seems to require a group knowledge of the software and then the question becomes how far back in that stretch realistically before knowledge is lost and you know part of the system become an effectively good fashion undocumented hard to maintain legacy code so that's an issue and given that most successful software spend most of its time in the maintenance face where functionalities being added but exacted to existing potentially large code base that don't seem to have you know some serious negatives to it you know some maybe it's good for version one of a product but then you need to start doing other things i'm only posing these as ideas for you for the moment "}