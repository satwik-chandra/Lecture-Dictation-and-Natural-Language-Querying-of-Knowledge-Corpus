{"Header": "Lecture1IntroductionB", "Link": "www.link.com", "TIME_STAMP": "46:00", "TEXT": "looking up the code already and and it's it's kind of knows what it's kind of like a like the Microsoft paperclip Microsoft paperclip knows you are trying to write to the next Facebook here's some code it's it's a fascinating idea but it's what it's doing is it's mining and millions upon millions of lines of code and you know some of the code we write is very unique but a lot of the code we write is that for the place it's very similar to other code and other people have written and since two is working out what code you're trying to write and I think that's really interesting look how efficient somebody using that code would be so the using that system would be compared to somebody not using that system so for a very straight forward personal reason you need to start understanding these tools and understanding and how you can use them if you're going to be a good engineer the good service good software programmer if you prefer to think of it that way because if you don't get used to these kinds of tools if you're not able to use things like source control and unit testing if you're not able to to deal with information the of knowledge based systems that engineers use if you're not able to use all compiler tracing all the rest of all of these kind of tools have become part of the toolkit of the software engineer what you're not going to have a career in a to be pretty blunt about it no matter how good you are designing algorithms so think about what's important reason to to to want to care about software engineering the course and there are some some in the class who will never program and or at least are unlikely to program in a professional capacity but are likely to become systems analysts and you know managers software engineering teams I'll put you that you guys need to to understand what it is they're doing if you're to understand what's possible from what the capabilities and capabilities "}