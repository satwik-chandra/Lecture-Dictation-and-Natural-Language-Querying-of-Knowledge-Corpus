[{"/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/index.js":"1","/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/reportWebVitals.js":"2","/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/App.js":"3","/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/Components/Button.js":"4","/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/Components/Response.js":"5","/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/Components/SearchBar.js":"6"},{"size":500,"mtime":1645537055764,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1645537055764,"results":"9","hashOfConfig":"8"},{"size":982,"mtime":1646668681296,"results":"10","hashOfConfig":"8"},{"size":619,"mtime":1646144845922,"results":"11","hashOfConfig":"8"},{"size":132,"mtime":1645537055764,"results":"12","hashOfConfig":"8"},{"size":1373,"mtime":1646671287683,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},"1vawi3o",{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},"/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/index.js",[],[],["37","38"],"/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/reportWebVitals.js",[],[],"/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/App.js",["39"],[],"import './App.css';\nimport Button from './Components/Button.js'\nimport Response from './Components/Response.js'\nimport SearchBar from './Components/SearchBar.js'\n\nimport { useState, useEffect } from 'react'\n\nfunction App() {\n\n  const [responses, setResponses] = useState([])\n\n  useEffect(() => {\n       const getResp = async () => {\n       const respFromServer = await fetchResp()\n       setResponses(respFromServer)\n       }\n\n      getResp()\n\n    }, [])\n\n  const fetchResp = async () => {\n      const res = await fetch('http://localhost:3001/api/discovery/query/google-and-ai')\n      const data = await res.json()\n      console.log(data)\n      console.log(typeof data)\n      return data\n  }\n\n  return (\n    <div className=\"Container\">\n      <h1>Hello World</h1>\n      <Button color='blue' text='Run Query: Google and AI' resp ='p' data={responses}/>\n      <SearchBar title='query: ' inputV = 'Sub' value = 't' resp='here' data={responses}/>\n    </div>\n  );\n}\n\nexport default App;\n\n",["40","41"],"/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/Components/Button.js",["42","43"],[],"import React from 'react'\nimport { useState, useEffect } from 'react'\nimport Response from './Response.js'\nimport $ from 'jquery'\n\nexport const Button = ({color, text, resp, data}) => {\n\n    const [response, setResponse] = useState(resp)\n\n\n    const onClick = (_e) => {\n        setResponse(data['result']['results'][0]['text']);\n        console.log(\"Run Query: '/n' Google and AI\");\n    }\n\n    return (\n    <div>\n        <button onClick={onClick} \n        style={{backgroundColor: color}}\n        className='btn'>{text}</button>\n       <Response key ={\"1\"} text = {response}/>\n    </div>\n    )\n}\n\nexport default Button\n","/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/Components/Response.js",[],[],"/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/Components/SearchBar.js",["44"],[],"import React from 'react'\nimport { useState, useEffect} from 'react'\nimport Response from './Response.js'\n\nexport const SearchBar = ({title, inputV, value, resp}) => {\n\n    const [newValue, setValue] = useState(value)\n    const [response, setResponse] = useState(resp)\n \n   const fetchResp = async () => {\n       const res = await fetch('http://localhost:3001/api/discovery/query/'+newValue)\n       console.log('http://localhost:3001/api/discovery/query/'+newValue)\n       const data = await res.json()\n       console.log(data)\n       return data\n   }\n\n    const handleChange = (event) => {\n        setValue(event.target.value);\n    }\n\n    const handleSubmit= async (event) => {\n        event.preventDefault();\n        setResponse('');\n        const respFromServer = await fetchResp()\n        try {\n            setResponse(respFromServer['result']['results'][0]['text']);\n        }catch(err) {\n            setResponse('Sorry! No results found :(');\n          }\n    }\n\n    return (\n        <div>\n           <form onSubmit={handleSubmit}>\n               <label>\n                    {title}\n                    <input type=\"text\" value={newValue} onChange={handleChange}/> \n                </label> \n                <input type=\"submit\" value={inputV}/>\n            </form>\n            <Response key ={\"1\"} text = {response}/>\n        </div>\n    )\n}\n\nexport default SearchBar\n",{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":3,"column":8,"nodeType":"51","messageId":"52","endLine":3,"endColumn":16},{"ruleId":"45","replacedBy":"53"},{"ruleId":"47","replacedBy":"54"},{"ruleId":"49","severity":1,"message":"55","line":2,"column":20,"nodeType":"51","messageId":"52","endLine":2,"endColumn":29},{"ruleId":"49","severity":1,"message":"56","line":4,"column":8,"nodeType":"51","messageId":"52","endLine":4,"endColumn":9},{"ruleId":"49","severity":1,"message":"55","line":2,"column":20,"nodeType":"51","messageId":"52","endLine":2,"endColumn":29},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"no-unused-vars","'Response' is defined but never used.","Identifier","unusedVar",["57"],["58"],"'useEffect' is defined but never used.","'$' is defined but never used.","no-global-assign","no-unsafe-negation"]