[{"/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/index.js":"1","/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/App.js":"2","/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/Components/SearchBar.js":"3","/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/Components/Title.js":"4","/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/Components/Response.js":"5","/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/Components/Search.js":"6","/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/Components/Button.js":"7","/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/reportWebVitals.js":"8","/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/Components/LecturePage.js":"9"},{"size":957,"mtime":1649247614614,"results":"10","hashOfConfig":"11"},{"size":1278,"mtime":1649265365789,"results":"12","hashOfConfig":"11"},{"size":4245,"mtime":1649244061441,"results":"13","hashOfConfig":"11"},{"size":403,"mtime":1649263247017,"results":"14","hashOfConfig":"11"},{"size":1323,"mtime":1649246999888,"results":"15","hashOfConfig":"11"},{"size":649,"mtime":1649264141504,"results":"16","hashOfConfig":"11"},{"size":617,"mtime":1649265552559,"results":"17","hashOfConfig":"11"},{"size":362,"mtime":1645537055764,"results":"18","hashOfConfig":"11"},{"size":910,"mtime":1649258514708,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"1ot16qk",{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/index.js",[],[],["53","54"],"/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/App.js",[],[],["55","56"],"/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/Components/SearchBar.js",["57","58","59"],[],"import React from 'react'\nimport { useState, useEffect} from 'react'\nimport Response from './Response.js'\nimport mag from '../mag.png'\n\nexport const SearchBar = ({suggestedQ, lectureFilter, value, sLink, hLink}) => {\n\n    const [newValue, setValue] = useState(value)\n    const [response, setResponse] = useState('Your Answers go here...')\n    const [phBool, setPHbool] = useState(true)\n    const [showLink, setShowLink] = useState(sLink)\n    const [hasLink, setHasLink] = useState(hLink)\n    const [allResults, setAllResults] = useState(Array())\n\n   const fetchResp = async () => {\n       const res = await fetch('http://localhost:3001/api/discovery/query/'+newValue)\n       const data = await res.json()\n       return data\n   }\n\n    const handleChange = (event) => {\n       \n        setValue(event.target.value);\n    }\n\n    useEffect(() => {\n        console.log(allResults)\n        console.log(allResults.size)\n    }, [allResults]);\n\n    const handleSubmit= async (event) => {\n        event.preventDefault();\n        setAllResults([])\n        setShowLink(false)\n        setResponse('');\n        const respFromServer = await fetchResp()\n        console.log(respFromServer)\n        const results = []\n        const numResults = respFromServer['result']['matching_results']\n        console.log(numResults)\n        if (numResults === 0){\n            setResponse('sorry no results found...')\n            setPHbool(true)\n        }\n        else {\n            \n            if(lectureFilter ==='n') {\n                for (let i = 0; i < numResults; i++) {\n                    try { \n                        setPHbool(false)\n                        results.push([respFromServer['result']['results'][i]['TEXT'],\n                                    respFromServer['result']['results'][i]['TIME_STAMP'],\n                                    respFromServer['result']['results'][i]['Header']])\n                    } catch(err) {\n                        console.log(\"you've broken\")\n                        break\n                    }\n                }\n            }\n            else {\n                for (let i = 0; i < numResults; i++) {\n                    try { \n                        setPHbool(false)\n                        if(respFromServer['result']['results'][i]['Header'] == lectureFilter) {\n                            results.push([respFromServer['result']['results'][i]['TEXT'],\n                            respFromServer['result']['results'][i]['TIME_STAMP'],\n                            respFromServer['result']['results'][i]['Header']])\n                        }\n                    } catch(err) {\n                        console.log(\"you've broken\")\n                        break\n                    }\n                }\n            }\n        setShowLink(true)\n        setAllResults(results)\n        }\n        \n    }\n\n    if(phBool) {\n        return (\n            <div>\n                <form onSubmit={handleSubmit}>\n                    <label>\n                        <input className='searchBar' placeholder= 'Search...' type=\"text\" value={newValue} onChange={handleChange}/> \n                    </label> \n                    <input className = \"mag\" type=\"image\" src={mag} alt=\"Submit\" width=\"24\" height=\"32\"/>\n                </form>\n                <div className = \"responsePlaceHolder\">\n                    <p >{response}</p>\n                    <p>{response && \"Why not try\"}</p><p >{response && <i>{suggestedQ}</i>}</p>\n                </div>\n            </div>\n        )\n    }\n    else {\n        return (\n            <div>\n                <form onSubmit={handleSubmit}>\n                    <label>\n                        <input className='searchBar' placeholder= 'Search...' type=\"text\" value={newValue} onChange={handleChange}/> \n                    </label> \n                    <input className = \"mag\" type=\"image\" src={mag} alt=\"Submit\" width=\"24\" height=\"32\"/>\n                </form>\n\n                {allResults.map((res, i) => (\n                    <Response key ={i} lectureName={res[2]} timeStamp={res[1]} keyword= {newValue} text = {res[0]} showLink = {showLink} hasLink = {hasLink}/>\n                ))} \n  \n                <div className=\"stopShake\"/>\n            </div>\n\n        )\n    }\n}\n\nexport default SearchBar\n",["60","61"],"/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/Components/Title.js",["62"],[],"import React from 'react'\nimport logo from '.././images/tLogo3.png'\nimport logo2 from '.././images/Find_Opic_Logo2.png'\n\nexport const Title = () => {\n    return (\n        <div className=\"title\">\n            <img className ='logo' src={logo} alt=\"tLogo\" />\n            <img className=\"logo\" src={logo2}/>\n            <h5 className=\"copyright\">@copyright</h5>\n        </div>\n    )\n}\n\nexport default Title\n","/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/Components/Response.js",["63"],[],"import { yellow } from '@mui/material/colors';\nimport React from 'react'\nimport { Link } from 'react-router-dom'\n\nfunction ghi (text, highlight) {\n    text = text+''\n    const parts = text.split(new RegExp(`(${highlight})`, 'gi'));\n    return <span> { parts.map((part, i) => \n        <span key={i} style={part.toLowerCase() === highlight.toLowerCase() ? { backgroundColor: 'yellow' } : {} }>\n            { part }\n        </span>)\n    } </span>;\n}\n\nexport const Response = ({lectureName, timeStamp, keyword, text, showLink, hasLink}) => {\n\n    if(hasLink && showLink) {\n        return (\n            <div className=\"response\">\n                {showLink && <h2>{lectureName}</h2>}\n                <div className='cardInfo'>\n                    <p><b>Time Stamp:</b></p><p className='timeStamp'> {'\"'+timeStamp+'\"'}</p>\n                    <div className=\"lecLink\">\n                        {hasLink && showLink && <Link className= 'link3' to={'/lectures/'+lectureName}>Lecture</Link>}\n                    </div>\n                </div>\n                {ghi(text, keyword)}\n            </div>\n        )\n    }\n    else {\n        return (\n            <div className=\"response\">\n                <p>{'Time Stamp: \"'+timeStamp+'\"'}</p>\n                {ghi(text, keyword)}\n            </div>\n        )\n    }\n}\n\nexport default Response","/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/Components/Search.js",[],[],"/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/Components/Button.js",["64","65","66"],[],"/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/reportWebVitals.js",[],[],"/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/Components/LecturePage.js",[],[],{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"67","replacedBy":"71"},{"ruleId":"69","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":12,"column":21,"nodeType":"75","messageId":"76","endLine":12,"endColumn":31},{"ruleId":"77","severity":1,"message":"78","line":13,"column":50,"nodeType":"79","messageId":"80","endLine":13,"endColumn":57},{"ruleId":"81","severity":1,"message":"82","line":64,"column":77,"nodeType":"83","messageId":"84","endLine":64,"endColumn":79},{"ruleId":"67","replacedBy":"85"},{"ruleId":"69","replacedBy":"86"},{"ruleId":"87","severity":1,"message":"88","line":9,"column":13,"nodeType":"89","endLine":9,"endColumn":48},{"ruleId":"73","severity":1,"message":"90","line":1,"column":10,"nodeType":"75","messageId":"76","endLine":1,"endColumn":16},{"ruleId":"73","severity":1,"message":"91","line":1,"column":17,"nodeType":"75","messageId":"76","endLine":1,"endColumn":25},{"ruleId":"92","severity":1,"message":"93","line":9,"column":13,"nodeType":"94","messageId":"95","endLine":9,"endColumn":55},{"ruleId":"92","severity":1,"message":"93","line":12,"column":13,"nodeType":"94","messageId":"95","endLine":12,"endColumn":53},"no-native-reassign",["96"],"no-negated-in-lhs",["97"],["96"],["97"],"no-unused-vars","'setHasLink' is assigned a value but never used.","Identifier","unusedVar","no-array-constructor","The array literal notation [] is preferable.","CallExpression","preferLiteral","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["96"],["97"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'yellow' is defined but never used.","'useState' is defined but never used.","no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","no-global-assign","no-unsafe-negation"]