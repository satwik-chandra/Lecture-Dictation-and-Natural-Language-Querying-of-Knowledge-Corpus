[{"/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/index.js":"1","/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/App.js":"2","/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/Components/SearchBar.js":"3","/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/Components/Title.js":"4","/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/Components/Response.js":"5","/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/Components/Search.js":"6","/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/Components/Button.js":"7","/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/reportWebVitals.js":"8","/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/Components/LecturePage.js":"9"},{"size":915,"mtime":1649162913075,"results":"10","hashOfConfig":"11"},{"size":1123,"mtime":1649166290040,"results":"12","hashOfConfig":"11"},{"size":4049,"mtime":1649239005554,"results":"13","hashOfConfig":"11"},{"size":359,"mtime":1648997239025,"results":"14","hashOfConfig":"11"},{"size":892,"mtime":1649162829079,"results":"15","hashOfConfig":"11"},{"size":614,"mtime":1649163578181,"results":"16","hashOfConfig":"11"},{"size":340,"mtime":1648997239024,"results":"17","hashOfConfig":"11"},{"size":362,"mtime":1645537055764,"results":"18","hashOfConfig":"11"},{"size":848,"mtime":1649166250674,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"1ot16qk",{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/index.js",[],[],["49","50"],"/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/App.js",[],[],"/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/Components/SearchBar.js",["51","52","53","54"],[],"import React from 'react'\nimport { useState, useEffect} from 'react'\nimport Response from './Response.js'\nimport mag from '../mag.png'\n\nexport const SearchBar = ({lectureFilter, value, sLink, hLink}) => {\n\n    const [newValue, setValue] = useState(value)\n    const [response, setResponse] = useState('Your Answers go here')\n    const [phBool, setPHbool] = useState(true)\n    const [showLink, setShowLink] = useState(sLink)\n    const [hasLink, setHasLink] = useState(hLink)\n    const [allResults, setAllResults] = useState(Array())\n\n   const fetchResp = async () => {\n       const res = await fetch('http://localhost:3001/api/discovery/query/'+newValue)\n       const data = await res.json()\n       return data\n   }\n\n    const handleChange = (event) => {\n       \n        setValue(event.target.value);\n    }\n\n    useEffect(() => {\n        console.log(allResults)\n        console.log(allResults.size)\n    }, [allResults]);\n\n    const handleSubmit= async (event) => {\n        event.preventDefault();\n        setAllResults([])\n        setShowLink(false)\n        setResponse('');\n        const respFromServer = await fetchResp()\n        console.log(respFromServer)\n        const results = []\n        const numResults = respFromServer['result']['matching_results']\n        console.log(numResults)\n        if (numResults == 0){\n            setResponse('Sorry')\n        }\n        else {\n            \n            if(lectureFilter ==='n') {\n                for (let i = 0; i < numResults; i++) {\n                    try { \n                        setPHbool(false)\n                        results.push([respFromServer['result']['results'][i]['TEXT'],\n                                    respFromServer['result']['results'][i]['TIME_STAMP'],\n                                    respFromServer['result']['results'][i]['Header']])\n                    } catch(err) {\n                        console.log(\"you've broken\")\n                        break\n                    }\n                }\n            }\n            else {\n                for (let i = 0; i < numResults; i++) {\n                    try { \n                        setPHbool(false)\n                        if(respFromServer['result']['results'][i]['Header'] == lectureFilter) {\n                            results.push([respFromServer['result']['results'][i]['TEXT'],\n                            respFromServer['result']['results'][i]['TIME_STAMP'],\n                            respFromServer['result']['results'][i]['Header']])\n                        }\n                    } catch(err) {\n                        console.log(\"you've broken\")\n                        break\n                    }\n                }\n            }\n        setShowLink(true)\n        setAllResults(results)\n        }\n        \n    }\n\n    if(phBool) {\n        return (\n            <div>\n                <form onSubmit={handleSubmit}>\n                    <label>\n                        <input className='searchBar' placeholder= 'Search...' type=\"text\" value={newValue} onChange={handleChange}/> \n                    </label> \n                    <input className = \"mag\" type=\"image\" src={mag} alt=\"Submit\" width=\"24\" height=\"32\"/>\n                </form>\n                    <p className = \"responsePlaceHolder\">{phBool && response}</p>\n            </div>\n        )\n    }\n    else {\n        return (\n            <div>\n                <form onSubmit={handleSubmit}>\n                    <label>\n                        <input className='searchBar' placeholder= 'Search...' type=\"text\" value={newValue} onChange={handleChange}/> \n                    </label> \n                    <input className = \"mag\" type=\"image\" src={mag} alt=\"Submit\" width=\"18\" height=\"24\"/>\n                </form>\n\n                {allResults.map((res, i) => (\n                    <Response key ={i} lectureName={res[2]} timeStamp={res[1]} keyword= {newValue} text = {res[0]} showLink = {showLink} hasLink = {hasLink}/>\n                ))} \n  \n                <div className=\"stopShake\"/>\n            </div>\n\n        )\n    }\n}\n\nexport default SearchBar\n","/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/Components/Title.js",[],[],"/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/Components/Response.js",[],[],"/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/Components/Search.js",[],[],"/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/Components/Button.js",[],[],"/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/reportWebVitals.js",[],[],"/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/Components/LecturePage.js",[],[],{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":12,"column":21,"nodeType":"61","messageId":"62","endLine":12,"endColumn":31},{"ruleId":"63","severity":1,"message":"64","line":13,"column":50,"nodeType":"65","messageId":"66","endLine":13,"endColumn":57},{"ruleId":"67","severity":1,"message":"68","line":41,"column":24,"nodeType":"69","messageId":"70","endLine":41,"endColumn":26},{"ruleId":"67","severity":1,"message":"68","line":63,"column":77,"nodeType":"69","messageId":"70","endLine":63,"endColumn":79},"no-native-reassign",["71"],"no-negated-in-lhs",["72"],"no-unused-vars","'setHasLink' is assigned a value but never used.","Identifier","unusedVar","no-array-constructor","The array literal notation [] is preferable.","CallExpression","preferLiteral","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]