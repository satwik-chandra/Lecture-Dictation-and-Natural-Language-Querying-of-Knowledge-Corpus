[{"/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/index.js":"1","/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/App.js":"2","/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/Components/SearchBar.js":"3","/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/Components/Title.js":"4","/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/Components/Response.js":"5","/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/Components/Search.js":"6","/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/Components/Button.js":"7","/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/reportWebVitals.js":"8","/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/Components/LecturePage.js":"9"},{"size":957,"mtime":1649247614614,"results":"10","hashOfConfig":"11"},{"size":1168,"mtime":1649244125994,"results":"12","hashOfConfig":"11"},{"size":4245,"mtime":1649244061441,"results":"13","hashOfConfig":"11"},{"size":359,"mtime":1648997239025,"results":"14","hashOfConfig":"11"},{"size":1323,"mtime":1649246999888,"results":"15","hashOfConfig":"11"},{"size":653,"mtime":1649244139212,"results":"16","hashOfConfig":"11"},{"size":340,"mtime":1648997239024,"results":"17","hashOfConfig":"11"},{"size":362,"mtime":1645537055764,"results":"18","hashOfConfig":"11"},{"size":885,"mtime":1649244107237,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ot16qk",{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/index.js",[],[],"/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/App.js",[],[],["50","51"],"/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/Components/SearchBar.js",["52","53","54"],[],"import React from 'react'\nimport { useState, useEffect} from 'react'\nimport Response from './Response.js'\nimport mag from '../mag.png'\n\nexport const SearchBar = ({suggestedQ, lectureFilter, value, sLink, hLink}) => {\n\n    const [newValue, setValue] = useState(value)\n    const [response, setResponse] = useState('Your Answers go here...')\n    const [phBool, setPHbool] = useState(true)\n    const [showLink, setShowLink] = useState(sLink)\n    const [hasLink, setHasLink] = useState(hLink)\n    const [allResults, setAllResults] = useState(Array())\n\n   const fetchResp = async () => {\n       const res = await fetch('http://localhost:3001/api/discovery/query/'+newValue)\n       const data = await res.json()\n       return data\n   }\n\n    const handleChange = (event) => {\n       \n        setValue(event.target.value);\n    }\n\n    useEffect(() => {\n        console.log(allResults)\n        console.log(allResults.size)\n    }, [allResults]);\n\n    const handleSubmit= async (event) => {\n        event.preventDefault();\n        setAllResults([])\n        setShowLink(false)\n        setResponse('');\n        const respFromServer = await fetchResp()\n        console.log(respFromServer)\n        const results = []\n        const numResults = respFromServer['result']['matching_results']\n        console.log(numResults)\n        if (numResults === 0){\n            setResponse('sorry no results found...')\n            setPHbool(true)\n        }\n        else {\n            \n            if(lectureFilter ==='n') {\n                for (let i = 0; i < numResults; i++) {\n                    try { \n                        setPHbool(false)\n                        results.push([respFromServer['result']['results'][i]['TEXT'],\n                                    respFromServer['result']['results'][i]['TIME_STAMP'],\n                                    respFromServer['result']['results'][i]['Header']])\n                    } catch(err) {\n                        console.log(\"you've broken\")\n                        break\n                    }\n                }\n            }\n            else {\n                for (let i = 0; i < numResults; i++) {\n                    try { \n                        setPHbool(false)\n                        if(respFromServer['result']['results'][i]['Header'] == lectureFilter) {\n                            results.push([respFromServer['result']['results'][i]['TEXT'],\n                            respFromServer['result']['results'][i]['TIME_STAMP'],\n                            respFromServer['result']['results'][i]['Header']])\n                        }\n                    } catch(err) {\n                        console.log(\"you've broken\")\n                        break\n                    }\n                }\n            }\n        setShowLink(true)\n        setAllResults(results)\n        }\n        \n    }\n\n    if(phBool) {\n        return (\n            <div>\n                <form onSubmit={handleSubmit}>\n                    <label>\n                        <input className='searchBar' placeholder= 'Search...' type=\"text\" value={newValue} onChange={handleChange}/> \n                    </label> \n                    <input className = \"mag\" type=\"image\" src={mag} alt=\"Submit\" width=\"24\" height=\"32\"/>\n                </form>\n                <div className = \"responsePlaceHolder\">\n                    <p >{response}</p>\n                    <p>{response && \"Why not try\"}</p><p >{response && <i>{suggestedQ}</i>}</p>\n                </div>\n            </div>\n        )\n    }\n    else {\n        return (\n            <div>\n                <form onSubmit={handleSubmit}>\n                    <label>\n                        <input className='searchBar' placeholder= 'Search...' type=\"text\" value={newValue} onChange={handleChange}/> \n                    </label> \n                    <input className = \"mag\" type=\"image\" src={mag} alt=\"Submit\" width=\"24\" height=\"32\"/>\n                </form>\n\n                {allResults.map((res, i) => (\n                    <Response key ={i} lectureName={res[2]} timeStamp={res[1]} keyword= {newValue} text = {res[0]} showLink = {showLink} hasLink = {hasLink}/>\n                ))} \n  \n                <div className=\"stopShake\"/>\n            </div>\n\n        )\n    }\n}\n\nexport default SearchBar\n","/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/Components/Title.js",[],[],"/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/Components/Response.js",["55"],[],"import { yellow } from '@mui/material/colors';\nimport React from 'react'\nimport { Link } from 'react-router-dom'\n\nfunction ghi (text, highlight) {\n    text = text+''\n    const parts = text.split(new RegExp(`(${highlight})`, 'gi'));\n    return <span> { parts.map((part, i) => \n        <span key={i} style={part.toLowerCase() === highlight.toLowerCase() ? { backgroundColor: 'yellow' } : {} }>\n            { part }\n        </span>)\n    } </span>;\n}\n\nexport const Response = ({lectureName, timeStamp, keyword, text, showLink, hasLink}) => {\n\n    if(hasLink && showLink) {\n        return (\n            <div className=\"response\">\n                {showLink && <h2>{lectureName}</h2>}\n                <div className='cardInfo'>\n                    <p><b>Time Stamp:</b></p><p className='timeStamp'> {'\"'+timeStamp+'\"'}</p>\n                    <div className=\"lecLink\">\n                        {hasLink && showLink && <Link className= 'link3' to={'/lectures/'+lectureName}>Lecture</Link>}\n                    </div>\n                </div>\n                {ghi(text, keyword)}\n            </div>\n        )\n    }\n    else {\n        return (\n            <div className=\"response\">\n                <p>{'Time Stamp: \"'+timeStamp+'\"'}</p>\n                {ghi(text, keyword)}\n            </div>\n        )\n    }\n}\n\nexport default Response","/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/Components/Search.js",[],[],"/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/Components/Button.js",[],[],"/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/reportWebVitals.js",[],[],"/Users/stephencashin/Lecture-Dictation-and-Natural-Language-Querying-of-Knowledge-Corpus/Front-End/ui/src/Components/LecturePage.js",[],[],{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":12,"column":21,"nodeType":"62","messageId":"63","endLine":12,"endColumn":31},{"ruleId":"64","severity":1,"message":"65","line":13,"column":50,"nodeType":"66","messageId":"67","endLine":13,"endColumn":57},{"ruleId":"68","severity":1,"message":"69","line":64,"column":77,"nodeType":"70","messageId":"71","endLine":64,"endColumn":79},{"ruleId":"60","severity":1,"message":"72","line":1,"column":10,"nodeType":"62","messageId":"63","endLine":1,"endColumn":16},"no-native-reassign",["73"],"no-negated-in-lhs",["74"],"no-unused-vars","'setHasLink' is assigned a value but never used.","Identifier","unusedVar","no-array-constructor","The array literal notation [] is preferable.","CallExpression","preferLiteral","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'yellow' is defined but never used.","no-global-assign","no-unsafe-negation"]
